import * as swc from '@swc/core';

declare function createSpan(span?: swc.Span): swc.Span;
declare function createIdentifer(value: string): swc.Identifier;
declare function createStringLiteral(value: string): swc.StringLiteral & {
    raw?: string;
};
declare function createMemberExpression(object: swc.Identifier | swc.ThisExpression | swc.MemberExpression, property: swc.Identifier): swc.MemberExpression;
declare function createCallExpression(callee: swc.Expression | swc.Identifier | swc.Super | swc.Import, args?: swc.Argument[]): swc.CallExpression;
declare function createExpressionStatement(expression: swc.Expression): swc.ExpressionStatement;
declare function createAssignmentExpression(left: swc.Expression, right: swc.Expression): swc.AssignmentExpression;
declare function createImportDefaultSpecifier(identifer: string | swc.Identifier): swc.ImportDefaultSpecifier;
declare function createImportSpecifier(identifer: string | swc.Identifier): swc.ImportSpecifier;
declare function createNamedImportSpecifier(local: string | swc.Identifier, imported: string | swc.Identifier): swc.NamedImportSpecifier;
declare function createArrayExpression(elements: swc.ExprOrSpread[]): swc.ArrayExpression;
declare function createKeyValueProperty(identifer: string | swc.Identifier, expression: swc.Expression): swc.KeyValueProperty;
declare function createObjectExpression(properties: (swc.Property | swc.SpreadElement)[]): swc.ObjectExpression;
declare function createReturnStatement(expression: swc.Expression): swc.ReturnStatement;
declare function createBlockStatement(statements: swc.Statement[]): swc.BlockStatement;
declare function updateImportDeclaration(node: swc.ImportDeclaration, source: swc.StringLiteral, specifiers: (swc.ImportSpecifier | swc.ImportDefaultSpecifier)[]): swc.ImportDeclaration;
declare function createThisExpression(): swc.ThisExpression;
declare function createGetter(key: swc.Identifier, body: swc.BlockStatement, decorators?: swc.Decorator[]): swc.ClassMethod;
declare function createFunction(body: swc.BlockStatement, params?: swc.Param[], decorators?: swc.Decorator[]): swc.Fn;
declare function createTemplateElement(value: string, isNewSyntax?: boolean): swc.TemplateElement;
declare function createTemplateLiteral(quasis: swc.TemplateElement[], expressions?: swc.Expression[]): swc.TemplateLiteral;
declare function createTaggedTemplateExpression(tag: swc.Identifier, template: swc.TemplateLiteral): swc.TaggedTemplateExpression;
declare function createDecorator(expression: swc.CallExpression): swc.Decorator;
interface ClassPropertyOptions {
    isStatic?: boolean;
    typeAnnotation?: swc.TsTypeAnnotation;
    isAbstract?: boolean;
    isOptional?: boolean;
    isOverride?: false;
    readonly?: false;
}
declare function createClassProperty(key: string | swc.Identifier, value: swc.Expression, options?: ClassPropertyOptions): swc.ClassProperty & ClassPropertyOptions;
declare function createExportDefaultDeclaration(decl: swc.DefaultDecl): swc.ExportDefaultDeclaration;
declare function createClassExpression(identifer: string | swc.Identifier, body: swc.ClassMember[], decorators?: swc.Decorator[], superClass?: swc.Expression): swc.ClassExpression;
declare function createExportDefaultClassExpression(identifer: string | swc.Identifier, body: swc.ClassMember[], decorators?: swc.Decorator[], superClass?: swc.Expression): swc.ExportDefaultDeclaration;
declare function createExportDefaultExpression(expression: string | swc.Identifier): swc.ExportDefaultExpression;
declare function createVariableDeclarator(id: string | swc.Identifier, definite: boolean, init?: swc.Expression): swc.VariableDeclarator;
declare function createVariableDeclaration(kind: swc.VariableDeclarationKind, declare: boolean, declarations: swc.VariableDeclarator[]): swc.VariableDeclaration;
declare function createImportDeclaration(specifiers: swc.ImportSpecifier[], source: string | swc.StringLiteral): swc.ImportDeclaration;
declare function createConstructor(body: swc.BlockStatement, params?: swc.Param[]): swc.Constructor;
declare function createNullLiteral(): swc.NullLiteral;
declare function createSuper(args?: swc.Expression): swc.Super;
declare function createOptionalChainingExpression(base: swc.Expression): swc.OptionalChainingExpression;

declare const TYPES: Readonly<{
    CallExpression: "CallExpression";
    ClassDeclaration: "ClassDeclaration";
    Decorator: "Decorator";
    ImportDeclaration: "ImportDeclaration";
    StringLiteral: "StringLiteral";
    ClassMethod: "ClassMethod";
    Identifier: "Identifier";
    ImportSpecifier: "ImportSpecifier";
    MemberExpression: "MemberExpression";
    ExpressionStatement: "ExpressionStatement";
    ReturnStatement: "ReturnStatement";
    TaggedTemplateExpression: "TaggedTemplateExpression";
    TemplateLiteral: "TemplateLiteral";
    BlockStatement: "BlockStatement";
    TemplateElement: "TemplateElement";
    ClassProperty: "ClassProperty";
    ObjectExpression: "ObjectExpression";
    KeyValueProperty: "KeyValueProperty";
    TsTypeAnnotation: "TsTypeAnnotation";
    TsTypeReference: "TsTypeReference";
    ExportDeclaration: "ExportDeclaration";
    ExportDefaultDeclaration: "ExportDefaultDeclaration";
    ExportDefaultExpression: "ExportDefaultExpression";
    ImportDefaultSpecifier: "ImportDefaultSpecifier";
    AssignmentExpression: "AssignmentExpression";
    ArrayExpression: "ArrayExpression";
    VariableDeclaration: "VariableDeclaration";
    VariableDeclarator: "VariableDeclarator";
    Constructor: "Constructor";
    Parameter: "Parameter";
    NullLiteral: "NullLiteral";
    Super: "Super";
    ParenthesisExpression: "ParenthesisExpression";
    ArrowFunctionExpression: "ArrowFunctionExpression";
}>;

declare function isParenthesisExpression(node: swc.Node): node is swc.ParenthesisExpression;
declare function isArrowFunctionExpression(node: swc.Node): node is swc.ArrowFunctionExpression;
declare function isSuper(node: swc.Node): node is swc.Super;
declare function isExportDefaultDeclaration(node: swc.Node): node is swc.ExportDefaultDeclaration;
declare function isVariableDeclarator(node: swc.Node): node is swc.VariableDeclarator;
declare function isVariableDeclaration(node: swc.Node): node is swc.VariableDeclaration;
declare function isExportDefaultExpression(node: swc.Node): node is swc.ExportDefaultExpression;
declare function isExportDeclaration(node: swc.Node): node is swc.ExportDeclaration;
declare function isImportDeclaration(node: swc.Node): node is swc.ImportDeclaration;
declare function isClasDeclaration(node: swc.Node): node is swc.ClassDeclaration;
declare function isDecorator(node: swc.Node): node is swc.Decorator;
declare function isCallExpression(node: swc.Node): node is swc.CallExpression;
declare function isStringLiteral(node: swc.Node): node is swc.StringLiteral;
declare function isClassMethod(node: swc.Node): node is swc.ClassMethod;
declare function isIdentifer(node: swc.Node): node is swc.Identifier;
declare function isImportSpecifier(node: swc.Node): node is swc.ImportSpecifier;
declare function isImportDefaultSpecifier(node: swc.Node): node is swc.ImportDefaultSpecifier;
declare function isMemberExpression(node: swc.Node): node is swc.MemberExpression;
declare function isExpressionStatement(node: swc.Node): node is swc.ExpressionStatement;
declare function isReturnStatement(node: swc.Node): node is swc.ReturnStatement;
declare function isTaggedTemplateExpression(node: swc.Node): node is swc.TaggedTemplateExpression;
declare function isTemplateLiteral(node: swc.Node): node is swc.TemplateLiteral;
declare function isTemplateElement(node: swc.Node): node is swc.TemplateElement;
declare function isBlockStatement(node: swc.Node): node is swc.BlockStatement;
declare function isClassProperty(node: swc.Node): node is swc.ClassProperty;
declare function isObjectExpression(node: swc.Node): node is swc.ObjectExpression;
declare function isKeyValueProperty(node: swc.Node): node is swc.KeyValueProperty;
declare function isTsTypeAnnotation(node: swc.Node): node is swc.TsTypeAnnotation;
declare function isTsTypeReference(node: swc.Node): node is swc.TsTypeReference;
declare function isAssignmentExpression(node: swc.Node): node is swc.AssignmentExpression;
declare function isArrayExpression(node: swc.Node): node is swc.ArrayExpression;
declare function isConstructor(node: swc.Node): node is swc.Constructor;
declare function isParameter(node: swc.Node): node is swc.Param;
declare function isNullLiteral(node: swc.Node): node is swc.NullLiteral;

export { ClassPropertyOptions, TYPES, createArrayExpression, createAssignmentExpression, createBlockStatement, createCallExpression, createClassExpression, createClassProperty, createConstructor, createDecorator, createExportDefaultClassExpression, createExportDefaultDeclaration, createExportDefaultExpression, createExpressionStatement, createFunction, createGetter, createIdentifer, createImportDeclaration, createImportDefaultSpecifier, createImportSpecifier, createKeyValueProperty, createMemberExpression, createNamedImportSpecifier, createNullLiteral, createObjectExpression, createOptionalChainingExpression, createReturnStatement, createSpan, createStringLiteral, createSuper, createTaggedTemplateExpression, createTemplateElement, createTemplateLiteral, createThisExpression, createVariableDeclaration, createVariableDeclarator, isArrayExpression, isArrowFunctionExpression, isAssignmentExpression, isBlockStatement, isCallExpression, isClasDeclaration, isClassMethod, isClassProperty, isConstructor, isDecorator, isExportDeclaration, isExportDefaultDeclaration, isExportDefaultExpression, isExpressionStatement, isIdentifer, isImportDeclaration, isImportDefaultSpecifier, isImportSpecifier, isKeyValueProperty, isMemberExpression, isNullLiteral, isObjectExpression, isParameter, isParenthesisExpression, isReturnStatement, isStringLiteral, isSuper, isTaggedTemplateExpression, isTemplateElement, isTemplateLiteral, isTsTypeAnnotation, isTsTypeReference, isVariableDeclaration, isVariableDeclarator, updateImportDeclaration };
