import '@angular/compiler';
import '@angular/platform-server/init';
import 'zone.js/node';
import { provideHttpClient, withInterceptorsFromDi, HTTP_INTERCEPTORS, } from '@angular/common/http';
import { APP_BOOTSTRAP_LISTENER, ApplicationRef, enableProdMode, importProvidersFrom, InjectionToken, NgZone, } from '@angular/core';
import { provideServerRendering, renderApplication, } from '@angular/platform-server';
import { bootstrapApplication, provideClientHydration, } from '@angular/platform-browser';
import { mountPage } from '../shared/mountPage.js';
import { XhrFactory } from '@angular/common';
import xhr2 from 'xhr2';
import { readFile } from 'fs/promises';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';
import { filter, firstValueFrom } from 'rxjs';
const __dirname = dirname(fileURLToPath(import.meta.url));
export class ServerXhr {
    build() {
        xhr2.prototype._restrictedHeaders.cookie = false;
        return new xhr2.XMLHttpRequest();
    }
}
if (import.meta.env.PROD) {
    enableProdMode();
}
export const SSR_PAGE_PROPS = new InjectionToken('@nitedani/vite-plugin-angular/ssr-props', {
    factory() {
        return {
            pageProps: {},
            page: null,
            layout: null,
        };
    },
});
export const SSR_PAGE_PROPS_HOOK_PROVIDER = {
    provide: APP_BOOTSTRAP_LISTENER,
    useFactory: (appRef, { page, layout, }) => {
        let done = false;
        return async (componentRef) => {
            if (done) {
                return;
            }
            done = true;
            const compRef = appRef.components[0];
            const zone = appRef.injector.get(NgZone);
            await zone.run(async () => {
                mountPage({
                    page,
                    compRef,
                    layout,
                });
                await firstValueFrom(appRef.isStable.pipe(filter(isStable => isStable)));
                appRef.tick();
            });
        };
    },
    deps: [ApplicationRef, SSR_PAGE_PROPS],
    multi: true,
};
let indexHtmlString = null;
export const renderToString = async ({ page, layout, pageContext, providers = [], imports = [], document, serverUrl, indexHtml, root, selector, url, }) => {
    const { root: projectRoot, swc } = globalThis.__vite_plugin_angular;
    const rootComponent = layout ?? page;
    selector ??= 'app-root';
    //@ts-ignore
    rootComponent.Éµcmp.selectors = [[selector]];
    document ??= `<${selector}></${selector}>`;
    root ??= join(__dirname, '..', 'client');
    const urlOriginal = url ?? pageContext?.urlOriginal;
    if (indexHtml) {
        const documentPath = import.meta.env.DEV
            ? join(projectRoot, 'index.html')
            : join(root, 'index.html');
        indexHtmlString ??= await readFile(documentPath, 'utf-8');
        document = indexHtmlString.replace('<body>', `<body>${document}`);
        if (import.meta.env.DEV) {
            const devScript = `<script type="module" src="/@vite/client"></script>`;
            document = document.replace('</head>', `${devScript}</head>`);
        }
    }
    if (import.meta.env.DEV && swc) {
        const compilerScript = `<script type="module" src="/@angular/compiler"></script>`;
        document = document.replace('</head>', `${compilerScript}</head>`);
    }
    if (!serverUrl && pageContext?.req) {
        serverUrl = `${pageContext.req.protocol}://${pageContext.req.get('host')}`;
    }
    const extraProviders = [];
    if (serverUrl) {
        extraProviders.push({
            provide: HTTP_INTERCEPTORS,
            useFactory: () => ({
                intercept(req, next) {
                    // check if the request is for the server
                    if (serverUrl &&
                        (req.url.startsWith('/') || req.url.startsWith(serverUrl))) {
                        // if so, call the server
                        return next.handle(req.clone({
                            url: `${serverUrl}${req.url}`,
                        }));
                    }
                    return next.handle(req);
                },
            }),
            multi: true,
        });
    }
    return renderApplication(() => bootstrapApplication(layout ?? page, {
        providers: [
            ...providers,
            ...extraProviders,
            provideServerRendering(),
            provideClientHydration(),
            provideHttpClient(withInterceptorsFromDi()),
            importProvidersFrom(imports),
            { provide: XhrFactory, useClass: ServerXhr },
            {
                provide: SSR_PAGE_PROPS,
                useValue: { page, layout },
            },
            SSR_PAGE_PROPS_HOOK_PROVIDER,
        ],
    }), {
        document,
        url: urlOriginal,
    });
};
