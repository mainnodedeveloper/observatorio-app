import 'zone.js';
import { APP_BOOTSTRAP_LISTENER, createComponent, enableProdMode, importProvidersFrom, NgZone, } from '@angular/core';
import { createApplication, provideClientHydration, } from '@angular/platform-browser';
import { mountPage } from '../shared/mountPage.js';
import { provideHttpClient, withInterceptorsFromDi, HTTP_INTERCEPTORS, } from '@angular/common/http';
if (import.meta.env.PROD) {
    enableProdMode();
}
let hydrated = false;
export const renderPage = async ({ page, layout, pageContext, providers = [], imports = [], selector, }) => {
    const rootComponent = layout ?? page;
    selector ??= 'app-root';
    //@ts-ignore
    rootComponent.Éµcmp.selectors = [[selector]];
    const extraProviders = [];
    extraProviders.push({
        provide: HTTP_INTERCEPTORS,
        useFactory: () => ({
            intercept(req, next) {
                // check if the request is for the server
                if (req.url.startsWith('/')) {
                    // if so, call the server
                    return next.handle(req.clone({
                        url: `${window.location.origin}${req.url}`,
                    }));
                }
                return next.handle(req);
            },
        }),
        multi: true,
    });
    const appRef = await createApplication({
        providers: [
            ...providers,
            ...extraProviders,
            provideHttpClient(withInterceptorsFromDi()),
            ...(hydrated ? [] : [provideClientHydration()]),
            importProvidersFrom(imports),
        ],
    });
    hydrated = true;
    const zone = appRef.injector.get(NgZone);
    return zone.run(() => {
        const compRef = createComponent(rootComponent, {
            environmentInjector: appRef.injector,
            hostElement: document.querySelector(selector),
        });
        mountPage({
            page,
            layout,
            compRef,
        });
        appRef.attachView(compRef.hostView);
        appRef.tick();
        appRef.components.push(compRef);
        const listeners = appRef.injector.get(APP_BOOTSTRAP_LISTENER, []);
        listeners.forEach(listener => listener(compRef));
        return appRef;
    });
};
